@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Numerics
@typeparam TValue where TValue : INumber<TValue>
@inherits InputBase<TValue>
@inject IJSRuntime JS

<InputNumber TValue="TValue" Value="@Value" ValueExpression="@(() => Value)" ValueChanged="OnValueChanged" disabled="@Disabled" class="@($"text-{Align.ToString().ToLower()} {CssClass}{(editing ? null : " d-none")}")" @onblur="EndEditing" min="@Min" max="@Max" id="@ID" style="@Style" />
<span @onclick="StartEditing" class="text-nowrap @($"text-{Align.ToString().ToLower()}") @CssClass @(editing ? "d-none" : null)">@FormatValueAsString(Value)</span>

@code {
    [Parameter] public string? Format { get; set; } = "N0";
    [Parameter] public new string? CssClass { get; set; } = "form-control";
    [Parameter] public string? Style { get; set; }
    [Parameter] public Align Align { get; set; } = InputControls.Align.Start;
    [Parameter] public TValue? Min { get; set; } = default(TValue);
    [Parameter] public TValue? Max { get; set; } = default(TValue);
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? ID { get; set; }
    bool Percentage => !string.IsNullOrEmpty(Format) && Format!.ToLower().StartsWith("p");

    protected override void OnInitialized()
    {
        ID = ID ?? Guid.NewGuid().ToString();
        if (Min == default(TValue)) Min = GetMinValue();
        if (Max == default(TValue)) Max = GetMaxValue();
    }
    /// <summary>
    /// Gets or sets the error message used when displaying an a parsing error.
    /// </summary>
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";
    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    [DisallowNull] public ElementReference? Element { get; protected set; }
    bool editing = false;

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }

    /// <summary>
    /// Formats the value as a string. Derived classes can override this to determine the formatting used for <c>CurrentValueAsString</c>.
    /// </summary>
    /// <param name="value">The value to format.</param>
    /// <returns>A string representation of the value.</returns>
    protected override string? FormatValueAsString(TValue? value)
    {
        var culture = CultureInfo.CurrentCulture;
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return Percentage ? Convert.ToInt32(@int / 100, culture).ToString(Format) : Convert.ToInt32(@int, culture).ToString(Format);

            case long @long:
                return Percentage ? Convert.ToInt64(@long / 100, culture).ToString(Format) : Convert.ToInt64(@long, culture).ToString(Format);

            case short @short:
                return Percentage ? Convert.ToInt16(@short / 100, culture).ToString(Format) : Convert.ToInt16(@short, culture).ToString(Format);

            case double @double:
                return Percentage ? Convert.ToDouble(@double / 100, culture).ToString(Format) : Convert.ToDouble(@double, culture).ToString(Format);

            case decimal @decimal:
                return Percentage ? Convert.ToDecimal(@decimal / 100, culture).ToString(Format) : Convert.ToDecimal(@decimal, culture).ToString(Format);

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
    }

    private static TValue? GetMinValue() => typeof(TValue).Name switch
    {
        "Int16" => (TValue)(object)short.MinValue,
        "Int32" => (TValue)(object)int.MinValue,
        "Int64" => (TValue)(object)long.MinValue,
        "Double" => (TValue)(object)double.MinValue,
        "Decimal" => (TValue)(object)decimal.MinValue,
        _ => throw new InvalidOperationException($"Unsupported type {typeof(TValue).Name}")
    };

    private static TValue GetMaxValue() => typeof(TValue).Name switch
    {
        "Int16" => (TValue)(object)short.MaxValue,
        "Int32" => (TValue)(object)int.MaxValue,
        "Int64" => (TValue)(object)long.MaxValue,
        "Double" => (TValue)(object)double.MaxValue,
        "Decimal" => (TValue)(object)decimal.MaxValue,
        _ => throw new InvalidOperationException($"Unsupported type {typeof(TValue).Name}")
    };

    async Task StartEditing()
    {
        if (Disabled) return;

        editing = true;
        await Task.Delay(100);
        await JS.InvokeVoidAsync("selectAll", ID);
    }

    void EndEditing()
    {
        editing = false;
    }

    async Task OnValueChanged(TValue val)
    {
        if (Max != null && val > Max)
            val = Max;
        if (Min != null && val < Min)
            val = Min;

        Value = val;
        await ValueChanged.InvokeAsync(Value);
    }
}
