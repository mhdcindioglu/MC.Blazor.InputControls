@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@typeparam TValue
@inherits InputBase<TValue>
@inject IJSRuntime JS 
@if (editing)
{
    <input @ref="@inputElement" @bind-value="@Value" type="number" class="form-control" @onblur="EndEditing" id="@id"   />
}
else
{
    <span @onclick="StartEditing" class="form-control">@FormatValueAsString(Value)</span>
}


@code {
    string id = Guid.NewGuid().ToString();
    [Parameter] public string? Format { get; set; } = "N2";
    [Parameter] public string CurrencySymbol { get; set; } = "TL";//"₺";
    public string ID => id;
    ElementReference inputElement;
    /// <summary>
    /// Gets or sets the error message used when displaying an a parsing error.
    /// </summary>
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";
    /// <summary>
    /// Gets or sets the associated <see cref="ElementReference"/>.
    /// <para>
    /// May be <see langword="null"/> if accessed before the component is rendered.
    /// </para>
    /// </summary>
    [DisallowNull] public ElementReference? Element { get; protected set; }
    bool editing = false;

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }
    }

    /// <summary>
    /// Formats the value as a string. Derived classes can override this to determine the formatting used for <c>CurrentValueAsString</c>.
    /// </summary>
    /// <param name="value">The value to format.</param>
    /// <returns>A string representation of the value.</returns>
    protected override string? FormatValueAsString(TValue? value)
    {
        var culture = CultureInfo.CurrentCulture;
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return Convert.ToInt32(@int, culture).ToString(Format);

            case long @long:
                return Convert.ToInt64(@long, culture).ToString(Format);

            case short @short:
                return Convert.ToInt16(@short, culture).ToString(Format);

            case double @double:
                return Convert.ToDouble(@double, culture).ToString(Format);

            case decimal @decimal:
                return Convert.ToDecimal(@decimal, culture).ToString(Format);

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
    }

    async Task StartEditing()
    {
        editing = true;
        await Task.Delay(100);
        await JS.InvokeVoidAsync("selectAll", id);
    }

    void EndEditing()
    {
        editing = false;
    }
}
